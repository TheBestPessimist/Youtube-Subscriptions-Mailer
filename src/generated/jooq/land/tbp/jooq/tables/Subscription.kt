/*
 * This file is generated by jOOQ.
 */
package land.tbp.jooq.tables


import java.util.function.Function

import kotlin.collections.List

import land.tbp.jooq.DefaultSchema
import land.tbp.jooq.keys.SUBSCRIPTION__FK_SUBSCRIPTION_PK_USER
import land.tbp.jooq.keys.SUBSCRIPTION__FK_SUBSCRIPTION_PK_YOUTUBE_CHANNEL
import land.tbp.jooq.keys.SUBSCRIPTION__SUBSCRIPTION_PK
import land.tbp.jooq.tables.records.SubscriptionRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Subscription(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SubscriptionRecord>?,
    aliased: Table<SubscriptionRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SubscriptionRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>subscription</code>
         */
        val SUBSCRIPTION: Subscription = Subscription()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SubscriptionRecord> = SubscriptionRecord::class.java

    /**
     * The column <code>subscription.user_id</code>.
     */
    val USER_ID: TableField<SubscriptionRecord, Long?> = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>subscription.youtube_channel_id</code>.
     */
    val YOUTUBE_CHANNEL_ID: TableField<SubscriptionRecord, Long?> = createField(DSL.name("youtube_channel_id"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<SubscriptionRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SubscriptionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>subscription</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>subscription</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>subscription</code> table reference
     */
    constructor(): this(DSL.name("subscription"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SubscriptionRecord>): this(Internal.createPathAlias(child, key), child, key, SUBSCRIPTION, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<SubscriptionRecord> = SUBSCRIPTION__SUBSCRIPTION_PK
    override fun getReferences(): List<ForeignKey<SubscriptionRecord, *>> = listOf(SUBSCRIPTION__FK_SUBSCRIPTION_PK_USER, SUBSCRIPTION__FK_SUBSCRIPTION_PK_YOUTUBE_CHANNEL)

    private lateinit var _user: User
    private lateinit var _youtubeChannel: YoutubeChannel

    /**
     * Get the implicit join path to the <code>user</code> table.
     */
    fun user(): User {
        if (!this::_user.isInitialized)
            _user = User(this, SUBSCRIPTION__FK_SUBSCRIPTION_PK_USER)

        return _user;
    }

    val user: User
        get(): User = user()

    /**
     * Get the implicit join path to the <code>youtube_channel</code> table.
     */
    fun youtubeChannel(): YoutubeChannel {
        if (!this::_youtubeChannel.isInitialized)
            _youtubeChannel = YoutubeChannel(this, SUBSCRIPTION__FK_SUBSCRIPTION_PK_YOUTUBE_CHANNEL)

        return _youtubeChannel;
    }

    val youtubeChannel: YoutubeChannel
        get(): YoutubeChannel = youtubeChannel()
    override fun `as`(alias: String): Subscription = Subscription(DSL.name(alias), this)
    override fun `as`(alias: Name): Subscription = Subscription(alias, this)
    override fun `as`(alias: Table<*>): Subscription = Subscription(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Subscription = Subscription(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Subscription = Subscription(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Subscription = Subscription(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Long?, Long?> = super.fieldsRow() as Row2<Long?, Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
