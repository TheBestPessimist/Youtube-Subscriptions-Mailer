/*
 * This file is generated by jOOQ.
 */
package land.tbp.jooq.tables


import java.util.function.Function

import land.tbp.jooq.DefaultSchema
import land.tbp.jooq.tables.records.SqliteSequenceRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SqliteSequence(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SqliteSequenceRecord>?,
    aliased: Table<SqliteSequenceRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SqliteSequenceRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>sqlite_sequence</code>
         */
        val SQLITE_SEQUENCE: SqliteSequence = SqliteSequence()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SqliteSequenceRecord> = SqliteSequenceRecord::class.java
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val NAME: TableField<SqliteSequenceRecord, Any?> = createField(DSL.name("name"), SQLDataType.OTHER, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val SEQ: TableField<SqliteSequenceRecord, Any?> = createField(DSL.name("seq"), SQLDataType.OTHER, this, "")

    private constructor(alias: Name, aliased: Table<SqliteSequenceRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SqliteSequenceRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>sqlite_sequence</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sqlite_sequence</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sqlite_sequence</code> table reference
     */
    constructor(): this(DSL.name("sqlite_sequence"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SqliteSequenceRecord>): this(Internal.createPathAlias(child, key), child, key, SQLITE_SEQUENCE, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun `as`(alias: String): SqliteSequence = SqliteSequence(DSL.name(alias), this)
    override fun `as`(alias: Name): SqliteSequence = SqliteSequence(alias, this)
    override fun `as`(alias: Table<*>): SqliteSequence = SqliteSequence(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SqliteSequence = SqliteSequence(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SqliteSequence = SqliteSequence(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): SqliteSequence = SqliteSequence(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Any?, Any?> = super.fieldsRow() as Row2<Any?, Any?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Any?, Any?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Any?, Any?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
