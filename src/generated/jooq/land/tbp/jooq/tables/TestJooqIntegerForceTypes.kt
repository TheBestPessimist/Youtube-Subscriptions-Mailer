/*
 * This file is generated by jOOQ.
 */
package land.tbp.jooq.tables


import java.util.function.Function

import land.tbp.jooq.DefaultSchema
import land.tbp.jooq.tables.records.TestJooqIntegerForceTypesRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TestJooqIntegerForceTypes(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TestJooqIntegerForceTypesRecord>?,
    aliased: Table<TestJooqIntegerForceTypesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TestJooqIntegerForceTypesRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>test_jooq_integer_force_types</code>
         */
        val TEST_JOOQ_INTEGER_FORCE_TYPES: TestJooqIntegerForceTypes = TestJooqIntegerForceTypes()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TestJooqIntegerForceTypesRecord> = TestJooqIntegerForceTypesRecord::class.java

    /**
     * The column
     * <code>test_jooq_integer_force_types.column_type_integer</code>.
     */
    val COLUMN_TYPE_INTEGER: TableField<TestJooqIntegerForceTypesRecord, Long?> = createField(DSL.name("column_type_integer"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>test_jooq_integer_force_types.column_type_int</code>.
     */
    val COLUMN_TYPE_INT: TableField<TestJooqIntegerForceTypesRecord, Long?> = createField(DSL.name("column_type_int"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column
     * <code>test_jooq_integer_force_types.column_type_INT_CAPS_RAGE</code>.
     */
    val COLUMN_TYPE_INT_CAPS_RAGE: TableField<TestJooqIntegerForceTypesRecord, Long?> = createField(DSL.name("column_type_INT_CAPS_RAGE"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column
     * <code>test_jooq_integer_force_types.column_type_INTEGER_CAPS_RAGE</code>.
     */
    val COLUMN_TYPE_INTEGER_CAPS_RAGE: TableField<TestJooqIntegerForceTypesRecord, Long?> = createField(DSL.name("column_type_INTEGER_CAPS_RAGE"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TestJooqIntegerForceTypesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TestJooqIntegerForceTypesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>test_jooq_integer_force_types</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>test_jooq_integer_force_types</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>test_jooq_integer_force_types</code> table reference
     */
    constructor(): this(DSL.name("test_jooq_integer_force_types"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TestJooqIntegerForceTypesRecord>): this(Internal.createPathAlias(child, key), child, key, TEST_JOOQ_INTEGER_FORCE_TYPES, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun `as`(alias: String): TestJooqIntegerForceTypes = TestJooqIntegerForceTypes(DSL.name(alias), this)
    override fun `as`(alias: Name): TestJooqIntegerForceTypes = TestJooqIntegerForceTypes(alias, this)
    override fun `as`(alias: Table<*>): TestJooqIntegerForceTypes = TestJooqIntegerForceTypes(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TestJooqIntegerForceTypes = TestJooqIntegerForceTypes(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TestJooqIntegerForceTypes = TestJooqIntegerForceTypes(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TestJooqIntegerForceTypes = TestJooqIntegerForceTypes(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Long?, Long?, Long?, Long?> = super.fieldsRow() as Row4<Long?, Long?, Long?, Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, Long?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, Long?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
