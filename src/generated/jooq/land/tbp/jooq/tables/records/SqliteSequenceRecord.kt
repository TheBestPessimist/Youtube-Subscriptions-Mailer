/*
 * This file is generated by jOOQ.
 */
package land.tbp.jooq.tables.records


import javax.annotation.Nullable

import land.tbp.jooq.tables.SqliteSequence

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SqliteSequenceRecord() : TableRecordImpl<SqliteSequenceRecord>(SqliteSequence.SQLITE_SEQUENCE), Record2<Any?, Any?> {

    open var name: Any?
        set(value): Unit = set(0, value)
    @Nullable
        get(): Any? = get(0) as Any?

    open var seq: Any?
        set(value): Unit = set(1, value)
    @Nullable
        get(): Any? = get(1) as Any?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Any?, Any?> = super.fieldsRow() as Row2<Any?, Any?>
    override fun valuesRow(): Row2<Any?, Any?> = super.valuesRow() as Row2<Any?, Any?>
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun field1(): Field<Any?> = SqliteSequence.SQLITE_SEQUENCE.NAME
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun field2(): Field<Any?> = SqliteSequence.SQLITE_SEQUENCE.SEQ
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun component1(): Any? = name
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun component2(): Any? = seq
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun value1(): Any? = name
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun value2(): Any? = seq

    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun value1(value: Any?): SqliteSequenceRecord {
        this.name = value
        return this
    }

    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    override fun value2(value: Any?): SqliteSequenceRecord {
        this.seq = value
        return this
    }

    override fun values(value1: Any?, value2: Any?): SqliteSequenceRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised SqliteSequenceRecord
     */
    constructor(name: Any? = null, seq: Any? = null): this() {
        this.name = name
        this.seq = seq
    }

    /**
     * Create a detached, initialised SqliteSequenceRecord
     */
    constructor(value: land.tbp.jooq.tables.pojos.SqliteSequence?): this() {
        if (value != null) {
            this.name = value.name
            this.seq = value.seq
        }
    }
}
