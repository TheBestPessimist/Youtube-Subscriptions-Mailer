/*
 * This file is generated by jOOQ.
 */
package land.tbp.jooq.tables.records


import javax.annotation.Nonnull

import land.tbp.jooq.tables.TestJooqIntegerForceTypes

import org.jooq.Field
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TestJooqIntegerForceTypesRecord() : TableRecordImpl<TestJooqIntegerForceTypesRecord>(TestJooqIntegerForceTypes.TEST_JOOQ_INTEGER_FORCE_TYPES), Record4<Long?, Long?, Long?, Long?> {

    open var columnTypeInteger: Long?
        set(value): Unit = set(0, value)
    @Nonnull
        get(): Long? = get(0) as Long?

    open var columnTypeInt: Long?
        set(value): Unit = set(1, value)
    @Nonnull
        get(): Long? = get(1) as Long?

    open var columnTypeIntCapsRage: Long?
        set(value): Unit = set(2, value)
    @Nonnull
        get(): Long? = get(2) as Long?

    open var columnTypeIntegerCapsRage: Long?
        set(value): Unit = set(3, value)
    @Nonnull
        get(): Long? = get(3) as Long?

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, Long?, Long?, Long?> = super.fieldsRow() as Row4<Long?, Long?, Long?, Long?>
    override fun valuesRow(): Row4<Long?, Long?, Long?, Long?> = super.valuesRow() as Row4<Long?, Long?, Long?, Long?>
    override fun field1(): Field<Long?> = TestJooqIntegerForceTypes.TEST_JOOQ_INTEGER_FORCE_TYPES.COLUMN_TYPE_INTEGER
    override fun field2(): Field<Long?> = TestJooqIntegerForceTypes.TEST_JOOQ_INTEGER_FORCE_TYPES.COLUMN_TYPE_INT
    override fun field3(): Field<Long?> = TestJooqIntegerForceTypes.TEST_JOOQ_INTEGER_FORCE_TYPES.COLUMN_TYPE_INT_CAPS_RAGE
    override fun field4(): Field<Long?> = TestJooqIntegerForceTypes.TEST_JOOQ_INTEGER_FORCE_TYPES.COLUMN_TYPE_INTEGER_CAPS_RAGE
    override fun component1(): Long? = columnTypeInteger
    override fun component2(): Long? = columnTypeInt
    override fun component3(): Long? = columnTypeIntCapsRage
    override fun component4(): Long? = columnTypeIntegerCapsRage
    override fun value1(): Long? = columnTypeInteger
    override fun value2(): Long? = columnTypeInt
    override fun value3(): Long? = columnTypeIntCapsRage
    override fun value4(): Long? = columnTypeIntegerCapsRage

    override fun value1(value: Long?): TestJooqIntegerForceTypesRecord {
        this.columnTypeInteger = value
        return this
    }

    override fun value2(value: Long?): TestJooqIntegerForceTypesRecord {
        this.columnTypeInt = value
        return this
    }

    override fun value3(value: Long?): TestJooqIntegerForceTypesRecord {
        this.columnTypeIntCapsRage = value
        return this
    }

    override fun value4(value: Long?): TestJooqIntegerForceTypesRecord {
        this.columnTypeIntegerCapsRage = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: Long?): TestJooqIntegerForceTypesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised TestJooqIntegerForceTypesRecord
     */
    constructor(columnTypeInteger: Long? = null, columnTypeInt: Long? = null, columnTypeIntCapsRage: Long? = null, columnTypeIntegerCapsRage: Long? = null): this() {
        this.columnTypeInteger = columnTypeInteger
        this.columnTypeInt = columnTypeInt
        this.columnTypeIntCapsRage = columnTypeIntCapsRage
        this.columnTypeIntegerCapsRage = columnTypeIntegerCapsRage
    }

    /**
     * Create a detached, initialised TestJooqIntegerForceTypesRecord
     */
    constructor(value: land.tbp.jooq.tables.pojos.TestJooqIntegerForceTypes?): this() {
        if (value != null) {
            this.columnTypeInteger = value.columnTypeInteger
            this.columnTypeInt = value.columnTypeInt
            this.columnTypeIntCapsRage = value.columnTypeIntCapsRage
            this.columnTypeIntegerCapsRage = value.columnTypeIntegerCapsRage
        }
    }
}
