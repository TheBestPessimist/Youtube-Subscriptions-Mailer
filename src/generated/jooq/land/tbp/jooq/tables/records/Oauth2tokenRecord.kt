/*
 * This file is generated by jOOQ.
 */
package land.tbp.jooq.tables.records


import land.tbp.jooq.tables.Oauth2token

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Oauth2tokenRecord() : UpdatableRecordImpl<Oauth2tokenRecord>(Oauth2token.OAUTH2TOKEN), Record7<Long?, String?, String?, Long?, String?, String?, Long?> {

    open var oauth2tokenId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var accesstoken: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var tokentype: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var expiresinseconds: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var refreshtoken: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var scope: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var userId: Long?
        set(value): Unit = set(6, value)
        get(): Long? = get(6) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Long?, String?, String?, Long?, String?, String?, Long?> = super.fieldsRow() as Row7<Long?, String?, String?, Long?, String?, String?, Long?>
    override fun valuesRow(): Row7<Long?, String?, String?, Long?, String?, String?, Long?> = super.valuesRow() as Row7<Long?, String?, String?, Long?, String?, String?, Long?>
    override fun field1(): Field<Long?> = Oauth2token.OAUTH2TOKEN.OAUTH2TOKEN_ID
    override fun field2(): Field<String?> = Oauth2token.OAUTH2TOKEN.ACCESSTOKEN
    override fun field3(): Field<String?> = Oauth2token.OAUTH2TOKEN.TOKENTYPE
    override fun field4(): Field<Long?> = Oauth2token.OAUTH2TOKEN.EXPIRESINSECONDS
    override fun field5(): Field<String?> = Oauth2token.OAUTH2TOKEN.REFRESHTOKEN
    override fun field6(): Field<String?> = Oauth2token.OAUTH2TOKEN.SCOPE
    override fun field7(): Field<Long?> = Oauth2token.OAUTH2TOKEN.USER_ID
    override fun component1(): Long? = oauth2tokenId
    override fun component2(): String? = accesstoken
    override fun component3(): String? = tokentype
    override fun component4(): Long? = expiresinseconds
    override fun component5(): String? = refreshtoken
    override fun component6(): String? = scope
    override fun component7(): Long? = userId
    override fun value1(): Long? = oauth2tokenId
    override fun value2(): String? = accesstoken
    override fun value3(): String? = tokentype
    override fun value4(): Long? = expiresinseconds
    override fun value5(): String? = refreshtoken
    override fun value6(): String? = scope
    override fun value7(): Long? = userId

    override fun value1(value: Long?): Oauth2tokenRecord {
        this.oauth2tokenId = value
        return this
    }

    override fun value2(value: String?): Oauth2tokenRecord {
        this.accesstoken = value
        return this
    }

    override fun value3(value: String?): Oauth2tokenRecord {
        this.tokentype = value
        return this
    }

    override fun value4(value: Long?): Oauth2tokenRecord {
        this.expiresinseconds = value
        return this
    }

    override fun value5(value: String?): Oauth2tokenRecord {
        this.refreshtoken = value
        return this
    }

    override fun value6(value: String?): Oauth2tokenRecord {
        this.scope = value
        return this
    }

    override fun value7(value: Long?): Oauth2tokenRecord {
        this.userId = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: Long?, value5: String?, value6: String?, value7: Long?): Oauth2tokenRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised Oauth2tokenRecord
     */
    constructor(oauth2tokenId: Long? = null, accesstoken: String? = null, tokentype: String? = null, expiresinseconds: Long? = null, refreshtoken: String? = null, scope: String? = null, userId: Long? = null): this() {
        this.oauth2tokenId = oauth2tokenId
        this.accesstoken = accesstoken
        this.tokentype = tokentype
        this.expiresinseconds = expiresinseconds
        this.refreshtoken = refreshtoken
        this.scope = scope
        this.userId = userId
    }

    /**
     * Create a detached, initialised Oauth2tokenRecord
     */
    constructor(value: land.tbp.jooq.tables.pojos.Oauth2token?): this() {
        if (value != null) {
            this.oauth2tokenId = value.oauth2tokenId
            this.accesstoken = value.accesstoken
            this.tokentype = value.tokentype
            this.expiresinseconds = value.expiresinseconds
            this.refreshtoken = value.refreshtoken
            this.scope = value.scope
            this.userId = value.userId
        }
    }
}
