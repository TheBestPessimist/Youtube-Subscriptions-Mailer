/*
 * This file is generated by jOOQ.
 */
package land.tbp.jooq.tables


import java.util.function.Function

import kotlin.collections.List

import land.tbp.jooq.DefaultSchema
import land.tbp.jooq.indexes.YOUTUBE_CHANNEL_CHANNEL_ID_UINDEX
import land.tbp.jooq.keys.YOUTUBE_CHANNEL__PK_YOUTUBE_CHANNEL
import land.tbp.jooq.tables.records.YoutubeChannelRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class YoutubeChannel(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, YoutubeChannelRecord>?,
    aliased: Table<YoutubeChannelRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<YoutubeChannelRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>youtube_channel</code>
         */
        val YOUTUBE_CHANNEL: YoutubeChannel = YoutubeChannel()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<YoutubeChannelRecord> = YoutubeChannelRecord::class.java

    /**
     * The column <code>youtube_channel.youtube_channel_id</code>.
     */
    val YOUTUBE_CHANNEL_ID: TableField<YoutubeChannelRecord, Long?> = createField(DSL.name("youtube_channel_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>youtube_channel.channel_id</code>.
     */
    val CHANNEL_ID: TableField<YoutubeChannelRecord, String?> = createField(DSL.name("channel_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>youtube_channel.title</code>.
     */
    val TITLE: TableField<YoutubeChannelRecord, String?> = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<YoutubeChannelRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<YoutubeChannelRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>youtube_channel</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>youtube_channel</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>youtube_channel</code> table reference
     */
    constructor(): this(DSL.name("youtube_channel"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, YoutubeChannelRecord>): this(Internal.createPathAlias(child, key), child, key, YOUTUBE_CHANNEL, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(YOUTUBE_CHANNEL_CHANNEL_ID_UINDEX)
    override fun getIdentity(): Identity<YoutubeChannelRecord, Long?> = super.getIdentity() as Identity<YoutubeChannelRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<YoutubeChannelRecord> = YOUTUBE_CHANNEL__PK_YOUTUBE_CHANNEL
    override fun `as`(alias: String): YoutubeChannel = YoutubeChannel(DSL.name(alias), this)
    override fun `as`(alias: Name): YoutubeChannel = YoutubeChannel(alias, this)
    override fun `as`(alias: Table<*>): YoutubeChannel = YoutubeChannel(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): YoutubeChannel = YoutubeChannel(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): YoutubeChannel = YoutubeChannel(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): YoutubeChannel = YoutubeChannel(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Long?, String?, String?> = super.fieldsRow() as Row3<Long?, String?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
