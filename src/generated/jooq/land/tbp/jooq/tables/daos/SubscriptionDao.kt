/*
 * This file is generated by jOOQ.
 */
package land.tbp.jooq.tables.daos


import kotlin.collections.List

import land.tbp.jooq.tables.Subscription
import land.tbp.jooq.tables.records.SubscriptionRecord

import org.jooq.Configuration
import org.jooq.Record2
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SubscriptionDao(configuration: Configuration?) : DAOImpl<SubscriptionRecord, land.tbp.jooq.tables.pojos.Subscription, Record2<Long?, Long?>>(Subscription.SUBSCRIPTION, land.tbp.jooq.tables.pojos.Subscription::class.java, configuration) {

    /**
     * Create a new SubscriptionDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: land.tbp.jooq.tables.pojos.Subscription): Record2<Long?, Long?>? = compositeKeyRecord(o.userId, o.youtubeChannelId)

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserId(lowerInclusive: Long?, upperInclusive: Long?): List<land.tbp.jooq.tables.pojos.Subscription> = fetchRange(Subscription.SUBSCRIPTION.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    fun fetchByUserId(vararg values: Long): List<land.tbp.jooq.tables.pojos.Subscription> = fetch(Subscription.SUBSCRIPTION.USER_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>youtube_channel_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfYoutubeChannelId(lowerInclusive: Long?, upperInclusive: Long?): List<land.tbp.jooq.tables.pojos.Subscription> = fetchRange(Subscription.SUBSCRIPTION.YOUTUBE_CHANNEL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>youtube_channel_id IN (values)</code>
     */
    fun fetchByYoutubeChannelId(vararg values: Long): List<land.tbp.jooq.tables.pojos.Subscription> = fetch(Subscription.SUBSCRIPTION.YOUTUBE_CHANNEL_ID, *values.toTypedArray())
}
